sapply(works,is.null) == T
sapply(works,is.null)
length(works) == 0
works <- sapply(predictors, function (x){
if( shapiro.test(x)$p.value > 0.05)
{return(x)
else }}
works <- sapply(predictors, function (x){
if( shapiro.test(x)$p.value > 0.05)
{return(x)
else }}
)
works <- sapply(predictors, function (x){
if( shapiro.test(x)$p.value > 0.05)
{return(x)
else rm(x) }}
)
works <- sapply(predictors, function (x){
if( shapiro.test(x)$p.value > 0.05)
{return(x)
else rm(x) }}
)
works <- sapply(predictors, function (x){
if( shapiro.test(x)$p.value > 0.05)
{return(x)}
else rm(x) }
)
works
length(works) == 0
is.empty(works) == T
if(lapply(works, is.null))
lapply(works, is.null)
works <- works[lapply(works,length)>0]
works
length(works == 0)
length(works) == 0)
length(works)
length(works) == 0
smart_lm <- function(x){
predictors <- x[,2:ncol((x))]
if(ncol(x)-2 > 0){
works <- sapply(predictors, function (x){
if( shapiro.test(x)$p.value > 0.05)
{return(x)}
}
)
works <- works[lapply(works,length)>0]
if(length(works) == 0)
{print ('There are no normal variables in the data')}
else {
data <- works[!unlist(lapply(works, is.null))]
vect <- names(data)
vect1 <- names(x)[1]
frm <- as.formula(paste(vect1, "~", paste(vect, collapse = " + ")))
return(lm(frm,data = x)$coefficients)
}
}
else {
if(shapiro.test(x[[2]])$p.value > 0.05){
vect2 <- names(x)[2]
vect3 <- names(x)[1]
frm <- as.formula(paste(vect2, "~", paste(vect3, collapse = " + ")))
return(lm(frm,data = x)$coefficients)}
else print('There are no normal variables in the data')
}
}
test_data <- data.frame(x = 1:100, y = 1:100, z = 1:100)
smart_lm(test_data)
test_data <- data.frame(x = 1:100, y = 1:100, z = 1:100)
predictors <- x[,2:ncol((x))]
works <- sapply(predictors, function (x){
if( shapiro.test(x)$p.value > 0.05)
{return(x)}
}
)
works
works <- works[lapply(works,length)>0]
smart_lm <- function(x){
predictors <- x[,2:ncol((x))]
if(ncol(x)-2 > 0){
works <- sapply(predictors, function (x){
if( shapiro.test(x)$p.value > 0.05)
{return(x)}
}
)
works <- works[lapply(works,length)>0]
if(length(works) == 0)
{print ('There are no normal variables in the data')}
else {
data <- works[!unlist(lapply(works, is.null))]
frm <- as.formula(paste(names(x)[1], "~", paste( names(data), collapse = " + ")))
return(lm(frm,data = x)$coefficients)
}
}
else {
if(shapiro.test(x[[2]])$p.value > 0.05){
vect2 <- names(x)[2]
vect3 <- names(x)[1]
frm <- as.formula(paste(vect3, "~", paste(vect2, collapse = " + ")))
return(lm(frm,data = x)$coefficients)}
else print('There are no normal variables in the data')
}
}
smart_lm(test_data)
x <- swiss
vect2 <- names(x)[2]
vect3 <- names(x)[1]
frm <- as.formula(paste(paste(vect3, "~"), paste(vect2, collapse = " + ")))
frm <- as.formula(paste(paste(names(x)[1], "~"), paste( names(data), collapse = " + ")))
data <- works[!unlist(lapply(works, is.null))]
x <- swiss
works <- sapply(predictors, function (x){
if( shapiro.test(x)$p.value > 0.05)
{return(x)}
}
data <- works[!unlist(lapply(works, is.null))]
data <- works[!unlist(lapply(works, is.null))]
works <- sapply(predictors, function (x){
if( shapiro.test(x)$p.value > 0.05)
{return(x)}
}
works
works <- sapply(predictors, function (x){
if( shapiro.test(x)$p.value > 0.05)
{return(x)}
}
)
works
x <- swiss
predictors <- x[,2:ncol((x))]
works <- sapply(predictors, function (x){
if( shapiro.test(x)$p.value > 0.05)
{return(x)}
}
works
works <- sapply(predictors, function (x){
if( shapiro.test(x)$p.value > 0.05)
{return(x)}
}
)
works
works <- works[lapply(works,length)>0]
works
frm <- as.formula(paste(paste(names(x)[1], "~"), paste( names(works), collapse = " + ")))
return(lm(frm,data = x)$coefficients)
smart_lm <- function(x){
predictors <- x[,2:ncol((x))]
x <- swiss
if(ncol(x)-2 > 0){
works <- sapply(predictors, function (x){
if( shapiro.test(x)$p.value > 0.05)
{return(x)}
}
)
works <- works[lapply(works,length)>0]
if(length(works) == 0)
{print ('There are no normal variables in the data')}
else {
frm <- as.formula(paste(paste(names(x)[1], "~"), paste( names(works), collapse = " + ")))
return(lm(frm,data = x)$coefficients)
}
}
else {
if(shapiro.test(x[[2]])$p.value > 0.05){
vect2 <- names(x)[2]
vect3 <- names(x)[1]
frm <- as.formula(paste(paste(vect3, "~"), paste(vect2, collapse = " + ")))
return(lm(frm,data = x)$coefficients)}
else print('There are no normal variables in the data')
}
}
smart_lm <- function(x){
predictors <- x[,2:ncol((x))]
if(ncol(x)-2 > 0){
works <- sapply(predictors, function (x){
if( shapiro.test(x)$p.value > 0.05)
{return(x)}
}
)
works <- works[lapply(works,length)>0]
if(length(works) == 0)
{print ('There are no normal variables in the data')}
else {
frm <- as.formula(paste(paste(names(x)[1], "~"), paste( names(works), collapse = " + ")))
return(lm(frm,data = x)$coefficients)
}
}
else {
if(shapiro.test(x[[2]])$p.value > 0.05){
vect2 <- names(x)[2]
vect3 <- names(x)[1]
frm <- as.formula(paste(paste(vect3, "~"), paste(vect2, collapse = " + ")))
return(lm(frm,data = x)$coefficients)}
else print('There are no normal variables in the data')
}
}
test_data <- data.frame(x = 1:100, y = 1:100, z = 1:100)
smart_lm(test_data)
test_data <- swiss
smart_lm(test_data)
DT = data.table(x=rep(c("a","b","c"),each=2), y=c(1,3), v=1:6)
setkey(DT,y)
DT[, .SD[, paste(x,v, sep = "", collapse = "+")], by =y ] ##.SD applie some operation to key group
DT = data.table(x=rep(c("a","b","c"),each=2), y=c(1,3), v=1:6)
library(data.table)
DT = data.table(x=rep(c("a","b","c"),each=2), y=c(1,3), v=1:6)
setkey(DT,y)
DT[, .SD[, paste(x,v, sep = "", collapse = "+")], by =y ] ##.SD applie some operation to key group
DT = data.table(x=rep(c("a","b","c"),each=2), y=c(1,3), v=1:6)
setkey(DT,y)
DT
product.category <- data.table(product_id = c(1,1,2,2,3),
category_id = c(1,2,1,3,3))
purchases <- data.table(product_id = c(1, 2, 3),
price = c(100, 200, 300),
quantity = c(1, 1, 3))
setkey(product.category,product_id, category_id)
setkey(purchases,product_id,quantity)
final.table <- merge(product.category, purchases, by ="product_id" )
View(final.table)
View(final.table)
setkey(final.table,product_id, category_id)
final.table <- merge(product.category, purchases, by ="product_id" )
setkey(product.category,product_id)
setkey(purchases,product_id,quantity)
setkey(final.table,product_id, category_id)
View(final.table)
View(final.table)
final.table[, category_id,price,quantity]
final.table[, .(category_id,price,quantity)]
final.table[, .(category_id,price,quantity)][, .SD[, sum(price)], by "category_id"]
final.table[, .(category_id,price,quantity)][, .SD[, sum(price)], by="category_id"]
final.table[, .(category_id,price,quantity)][, .SD[, price = sum(price), quantity], by="category_id"]
final.table[, .(category_id,price,quantity)][, .SD[, sum(price) ], by="category_id"]
final.table[, .(category_id,price,quantity)]
final.table[, .(category_id,price,quantity)][, .SD[, c(sum(price),sum(quantity)) ], by="category_id"]
final.table[, .(category_id,price,quantity)][, .SD[, sum(price),sum(quantity) ], by="category_id"]
final.table[, .(category_id,price,quantity)][, .SD[, sum(price)&sum(quantity) ], by="category_id"]
final.table[, .(category_id,price,quantity)][, .SD[, sum(price) = price ], by="category_id"]
final.table[, .(category_id,price,quantity)][, .SD[, price:=sum(price)], by="category_id"]
final.table[, .(category_id,price,quantity)]
final.table[, .(category_id,price,quantity)][, .SD[, list(sum(price),sum(quantity)], by="category_id"]
final.table[, .(category_id,price,quantity)][, .SD[, list(sum(price),sum(quantity), by="category_id"]
final.table[, .(category_id,price,quantity)][, .SD, list(sum(price),sum(quantity), by="category_id"]
final.table[, .(category_id,price,quantity)][, .SD[, list(sum(price),sum(quantity)], by="category_id"]
final.table[, .(category_id,price,quantity)][, .SD[sum(price)], by="category_id"]
final.table[, .(category_id,price,quantity)][, .SD[,sum(price)], by="category_id"]
final.table[, .(category_id,price,quantity)][, .SD[,sum(price),sum(quantity)], by="category_id"]
final.table[, .(category_id,price,quantity)][, list(price:=sum(price), quantity:=sum(quantity) ), by=category_id]
final.table[, .(category_id,price,quantity)][, list(price=sum(price), quantity=sum(quantity) ), by=category_id]
product.category <- data.table(product_id = c(1,1,2,2,3),
category_id = c(1,2,1,3,3))
purchases <- data.table(product_id = c(1, 2, 3),
price = c(100, 200, 300),
quantity = c(1, 1, 3))
final.table <- merge(product.category, purchases, by ="product_id" )
View(final.table)
setkey(product.category,product_id, category_id)
setkey(purchases,product_id,quantity)
final.table <- merge(product.category, purchases, by ="product_id" )
View(final.table)
final.table <- merge(product.category, purchases, by ="product_id" )
setkey(final.table,category_id)
final.table[, .(category_id,price,quantity)][, list(price=sum(price), quantity=sum(quantity) ), by=category_id]
product.category <- data.table(product_id = c(1,1,2,2,3),
category_id = c(1,2,1,3,3))
purchases <- data.table(product_id = c(1, 2, 3),
price = c(100, 200, 300),
quantity = c(1, 1, 3))
sample.purchases <- data.table(price = c(100, 300, 50, 700, 30),
ordernumber = c(1,1,1,2,3),
quantity = c(1,1,2,1,-1),
product_id = 1:5)
sample.purchases[quantity>=0][, price.portion:=price/sum(price*qunatity), by = ordernumber]
sample.purchases[quantity>=0][, price.portion:=price/sum(price*quantity), by = ordernumber]
sp <- sample.purchases[quantity>=0][, price.portion:=price/sum(price*quantity), by = ordernumber]
View(sp)
sp <- sample.purchases[quantity>=0][, price.portion:=price/sum(price*quantity)*100, by = ordernumber]
View(sp)
sp <- sample.purchases[quantity>=0][, price.portion:=price/sum(price*quantity)*100.00, by = ordernumber]
View(sp)
sp <- sample.purchases[quantity>=0][, price.portion:=specify_decimal(price/sum(price*quantity)*100,2), by = ordernumber]
specify_decimal <- function(x, k) format(round(x, k), nsmall=k)
sp <- sample.purchases[quantity>=0][, price.portion:=specify_decimal(price/sum(price*quantity)*100,2), by = ordernumber]
View(sp)
.rs.restartR()
.rs.restartR()
install.packages("ggvis")
library(ggvis)
ggvis(mtcars, x = ~wt, y = ~mpg, fill = ~factor(cyl)) %>%
layer_points(size := 100)
setwd("D:/data/data")
df <- read.csv("my_data.csv")
View(df)
str(df)
levels(df$DON)
View(df)
df1 <- read.csv("my_data1.csv")
View(df1)
levels(df1$COMM)
View(df1)
df2 <- read.csv("my_data3.csv")
df2 <- read.csv("my_data3.csv",sep = ";")
View(df2)
df2 <- read.csv("my_data2.csv)
")
df2 <- read.csv("my_data2.csv")
View(df2)
df2[df2$GEO = "Canada"]
df2[df2$GEO == "Canada"]
df2[df2$GEO == "Canada",]
View(df2)
df2[df2$GEO == "Canada",df2$SEX = "Both sexes", df2$CAUSES = "All maligant neoplasms",]
df2[df2$GEO == "Canada",df2$SEX == "Both sexes", df2$CAUSES == "All maligant neoplasms",]
df2[df2$GEO == "Canada"&df2$SEX == "Both sexes"&df2$CAUSES == "All maligant neoplasms",]
View(df2)
df2[df2$GEO == "Canada"&df2$SEX == "Both sexes"&df2$CAUSES == "All maligant neoplasms(cancers)",]
View(df2)
View(df2)
df2[df2$GEO == "Canada"&df2$SEX == "Both sexes"&df2$CAUSES == "All malignant neoplasms (cancers)",]
my <- df2[df2$GEO == "Canada"&df2$SEX == "Both sexes"&df2$CAUSES == "All malignant neoplasms (cancers)",]
View(my)
View(df2)
View(df1)
levels(df1$COMM)
new_df <- df1[df1$COMM == "Total crops"]
new_df <- df1[df1$COMM == "Total crops",]
View(new_df)
new_df <- filter(df1, COMM == "Total crops")
library(rmarkdown)
library(dplyr)
library(ggplot2)
library(tidyr)
library(data.table)
new_df <- filter(df1, COMM == "Total crops")
View(new_df)
?slice
View(new_df)
View(df1)
View(new_df)
View(new_df)
new_df <- df1 %>%
filter(COMM == "Total crops") %>%
separate(Ref_Date, c("Year","Month"), sep = "-") %>%
select(Year, GEO, COMM,Value)
new_df <- df1 %>%
filter(COMM == "Total crops") #%>%
#separate(Ref_Date, c("Year","Month"), sep = "-") %>%
#select(Year, GEO, COMM,Value)
new_df <- df1 %>%
filter(COMM == "Total crops") %>%
separate(Ref_Date, c("Year","Month"), sep = "-")# %>%
#select(Year, GEO, COMM,Value)
View(new_df)
new_df <- df1 %>%
filter(COMM == "Total crops") %>%
separate(Ref_Date, c("Year","Month"), sep = "/")# %>%
#select(Year, GEO, COMM,Value)
View(new_df)
new_df <- df1 %>%
filter(COMM == "Total crops") %>%
separate(Ref_Date, c("Year","Month"), sep = "/") %>%
select(Year, GEO, COMM,Value)
View(new_df)
View(new_df)
levels(df1$GEO)
View(new_df)
df1 <- read.csv("my_data1.csv", na.strings = "x")
View(df1)
new_df <- df1 %>%
filter(COMM == "Total crops") %>%
separate(Ref_Date, c("Year","Month"), sep = "/") %>%
select(Year, GEO, COMM,Value)
group_by(GEO) %>%
summarise(YearsObserved = n(),
Mean_Prod = mean(Value, na.rm = T),
Lowest_Prod = min(Value, na.rm = T),
Highest_Prod = max(Value, na.rm),
Worst_Year = Year[which.min(Value)]
)
View(new_df)
short_stat <- new_df %>%
group_by(GEO) %>%
summarise(YearsObserved = n(),
Mean_Prod = mean(Value, na.rm = T),
Lowest_Prod = min(Value, na.rm = T),
Highest_Prod = max(Value, na.rm),
Worst_Year = Year[which.min(Value)]
)
short_stat <- new_df %>%
group_by(GEO) %>%
summarise(Mean_Prod = mean(Value, na.rm = T),
Lowest_Prod = min(Value, na.rm = T),
Highest_Prod = max(Value, na.rm = T),
Worst_Year = Year[which.min(Value)])
short_stat <- new_df %>%
group_by(GEO) %>%
summarise(Mean_Prod = mean(Value, na.rm = T),
Lowest_Prod = min(Value, na.rm = T),
Highest_Prod = max(Value, na.rm = T))
View(new_df)
df1 <- read.csv("my_data1.csv", na.strings = "x")
new_df <- df1 %>%
filter(COMM == "Total crops") %>%
separate(Ref_Date, c("Year","Month"), sep = "/") %>%
select(Year, GEO, COMM,Value)
short_stat <- new_df %>%
group_by(GEO) %>%
summarise(Mean_Prod = mean(Value, na.rm = T),
Lowest_Prod = min(Value, na.rm = T),
Highest_Prod = max(Value, na.rm = T))
mean(new_df$Value)
mean(new_df$Value,na.rm = T)
View(new_df)
is.numeric(new_df$Value)
as.numeric(new_df$Value)
View(new_df)
mean(as.numeric(new_df$Value),na.rm = T)
str(new_df$Value)
new_df$Value <- droplevels.factor(new_df$Value)
str(new_df$Value)
df1 <- read.csv("my_data1.csv", na.strings = "x")
new_df <- df1 %>%
filter(COMM == "Total crops") %>%
separate(Ref_Date, c("Year","Month"), sep = "/") %>%
select(Year, GEO, COMM,Value)
new_df$Value <- droplevels(new_df$Value)
View(new_df)
str(new_df)
new_df$Value <- as.numeric(levels(new_df$Value))[new_df$Value]
View(new_df)
str(new_df)
short_stat <- new_df %>%
group_by(GEO) %>%
summarise(Mean_Prod = mean(Value, na.rm = T),
Lowest_Prod = min(Value, na.rm = T),
Highest_Prod = max(Value, na.rm = T))
View(short_stat)
View(short_stat)
df1 <- read.csv("my_data1.csv", na.strings = "x")
new_df <- df1 %>%
filter(COMM == "Total crops", GEO != "Newfoundland and Labrador") %>%
separate(Ref_Date, c("Year","Month"), sep = "/") %>%
select(Year, GEO, COMM,Value)
new_df$Value <- as.numeric(levels(new_df$Value))[new_df$Value]
short_stat <- new_df %>%
summarise(Mean_Prod = mean(Value, na.rm = T),
group_by(GEO) %>%
Lowest_Prod = min(Value, na.rm = T),
Highest_Prod = max(Value, na.rm = T))
View(short_stat)
df1 <- read.csv("my_data1.csv", na.strings = "x")
new_df <- df1 %>%
filter(COMM == "Total crops", GEO != "Newfoundland and Labrador") %>%
separate(Ref_Date, c("Year","Month"), sep = "/") %>%
select(Year, GEO, COMM,Value)
new_df$Value <- as.numeric(levels(new_df$Value))[new_df$Value]
View(new_df)
short_stat <- new_df %>%
group_by(GEO) %>%
summarise(Mean_Prod = mean(Value, na.rm = T),
Lowest_Prod = min(Value, na.rm = T),
Highest_Prod = max(Value, na.rm = T),
Worst_Year = Year[which.min(Value)])
View(short_stat)
short_stat <- new_df %>%
group_by(GEO) %>%
summarise(Mean_Prod = mean(Value, na.rm = T),
Lowest_Prod = min(Value, na.rm = T),
Highest_Prod = max(Value, na.rm = T),
Best_Year = Year[which.max(Value)],
Worst_Year = Year[which.min(Value)])
View(short_stat)
View(short_stat)
View(short_stat)
View(new_df)
View(new_df)
new_df[new_df$Year = max(new_df$Year)]
new_df[new_df$Year == max(new_df$Year)]
new_df[new_df$Year == max(new_df$Year),]
sum(levels(df1$GEO))
levels(df1$GEO)
length(levels(df1$GEO))
?t.test
hypothe <- new_df%>%
group_by(GEO) %>%
do({
tt <- t.test(.$Value, alternative = "greater", mu = 0, conf.level = 0.99)
data.frame(Pvalue = tt$p.value,
Confiden_level = tt$conf.int[2])
})
View(hypothe)
hypothe <- new_df%>%
group_by(GEO) %>%
do({
tt <- t.test(.$Value, alternative = "less", mu = 0, conf.level = 0.99)
data.frame(Pvalue = tt$p.value,
Confiden_level = tt$conf.int[2])
})
View(hypothe)
hypothe <- new_df%>%
group_by(GEO) %>%
do({
tt <- t.test(.$Value, mu = 0, conf.level = 0.99)
data.frame(Pvalue = tt$p.value,
Confiden_level = tt$conf.int[2])
})
View(hypothe)
tb <- fread("kaggle\canimmigration\names.csv")
tb <- fread("kaggle/canimmigration/names.csv")
View(short_stat)
View(tb)
